(() => {
    'use strict';

    const camPreviewElm = document.getElementById('camera_preview');
    let camPreviewWidth = camPreviewElm.width;
    let camPreviewHeight = camPreviewElm.height;
    const camOverlayElm = document.getElementById('camera_overlay');
    const overlayCC = camOverlayElm.getContext('2d');
    const camMaskElm = document.getElementById('camera_mask');

    function cameraStart() {
        // check for camerasupport
        if (navigator.mediaDevices) {
            navigator.mediaDevices.getUserMedia({
                video: true
            }).then(gumSuccess).catch(gumFail);
        } else if (navigator.getUserMedia) {
            navigator.getUserMedia({
                video: true
            }, gumSuccess, gumFail);
        } else {
            alert('This demo depends on getUserMedia, which your browser does not seem to support. :(');
        }

        startVideo();
    }

    function cameraStop() {
        let stream = camPreviewElm.srcObject;
        if (stream) {
            let tracks = stream.getTracks();
            tracks.forEach(function (track) {
                track.stop();
            });
            cancelRequestAnimFrame(animationMaskRequest);
            cancelRequestAnimFrame(animationGridRequest);
            cancelRequestAnimFrame(animationRequest);
            camPreviewElm.srcObject = null;
            ctrack.stop();
        }
    }

    /********** check and set up video/webcam **********/

    function adjustVideoProportions() {
        // resize overlay and video if proportions are different
        // keep same height, just change width
        let proportion = camPreviewElm.videoWidth / camPreviewElm.videoHeight;
        camPreviewWidth = Math.round(camPreviewHeight * proportion);
        camPreviewElm.width = camPreviewWidth;
        camOverlayElm.width = camPreviewWidth;
        camMaskElm.width = camPreviewWidth;
        webGLContext.viewport(0, 0, webGLContext.canvas.width, webGLContext.canvas.height);
    }

    // check whether browser supports webGL
    let webGLContext = null;
    if (window.WebGLRenderingContext) {
        webGLContext = camMaskElm.getContext('webgl') || camMaskElm.getContext('experimental-webgl');
        if (!webGLContext || !webGLContext.getExtension('OES_texture_float')) {
            webGLContext = null;
        }
    }

    if (webGLContext == null) {
        alert("Your browser does not seem to support WebGL. Unfortunately this face mask example depends on WebGL, so you'll have to try it in another browser. :(");
    }

    function gumSuccess(stream) {
        // add camera stream if getUserMedia succeeded
        if ('srcObject' in camPreviewElm) {
            camPreviewElm.srcObject = stream;
        } else {
            camPreviewElm.src = (window.URL && window.URL.createObjectURL(stream));
        }

        camPreviewElm.onloadedmetadata = function () {
            adjustVideoProportions();
            fd.init(camMaskElm);
        }

        camPreviewElm.onresize = function () {
            adjustVideoProportions();
            fd.init(camMaskElm);
            if (trackingStarted) {
                ctrack.stop();
                ctrack.reset();
                ctrack.start(camPreviewElm);
            }
        }
    }

    function gumFail() {
        alert('There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.');
    }

    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

    const ctrack = new clm.tracker({
        useWebGL: true
    });

    ctrack.init(pModel);
    let trackingStarted = false;

    function startVideo() {
        // start video
        camPreviewElm.play();
        // start tracking
        ctrack.start(camPreviewElm);
        trackingStarted = true;
        // start loop to draw face
        drawLoop();
        // start drawing face grid
        drawGridLoop();
    }

    /*********** Code for face tracking and face masking *********/

    function updateMask(el) {
        currentMask = parseInt(el.target.value, 10);
        switchMasks();
    }

    let positions;
    const fd = new faceDeformer();

    const masks = {
        'none': [[54.132994582809886, 330.2447406482356], [53.94983737338171, 411.6786947731232], [59.50117090734213, 485.54290769879117], [69.05631570910228, 577.6685769791815], [80.73400747239302, 669.2047081882876], [156.52267192878207, 721.5706883991684], [224.03761978834723, 739.1269072358452], [301.4803537679236, 738.2366874355024], [373.4196207112528, 736.6185556997145], [445.4373067968218, 720.1452812831552], [517.3056114476371, 670.5474614197833], [531.7799053755264, 574.1779931382804], [540.681172219442, 487.967223266098], [542.4032150608897, 399.64595333584305], [541.5099369565868, 318.2177239885218], [484.00763535360403, 311.3318445452918], [436.57616449858205, 326.12885038303966], [386.214847801106, 333.2043197182652], [344.39911403378784, 336.7706741289662], [115.84864343665006, 313.35525243241443], [152.60840318917894, 322.7145050535586], [201.39783835228144, 332.29526724516336], [249.58724826191298, 336.53976562323317], [116.48023640991207, 348.8633768136441], [167.9642886955806, 350.9962302246727], [231.6749647028165, 359.48349174177827], [168.11831577303042, 375.4865728177492], [170.07462103025938, 361.76575290725043], [480.7831200700384, 348.57719399476593], [423.78106882269736, 353.08381522791285], [369.5853199174605, 360.3348770905004], [429.2517105029677, 374.978498189726], [428.4672557696136, 361.0310278167258], [298, 363], [253.70821429640165, 456.1515630753871], [232.81854206254127, 493.52915431030885], [250.27449264190767, 519.2760705851281], [294.9905749783811, 522.6580485667231], [340.00710866420684, 520.8077271147647], [357.28424845402884, 493.1349774295837], [336.03221275387335, 457.7253897416814], [296, 407], [270.69780042635847, 507.2277260957476], [320.8265507066314, 506.90809731554305], [219.49207600124322, 603.6108989555861], [236.4148918469843, 589.8509195222699], [267.0123175575189, 590.2653879517876], [302.37639394449644, 589.4456339021824], [337.18338067155105, 591.0755705685021], [366.9537080661368, 591.1696362146871], [383.17030058050824, 601.5027761622135], [366.07822563380967, 614.8268645173376], [336.20759244137867, 615.427540755917], [304.12597029775543, 615.4777558918809], [270.01910167830954, 615.9331065732697], [240.4271869365151, 614.9063722445486], [255.5183417994636, 603.9175341052295], [302.81892822034536, 605.4895650711086], [350.74058301633727, 604.2225054756758], [350.6655959742464, 603.528118265738], [303.78446463916174, 604.3090513544694], [256.409865954666, 603.8790201634539], [298.25175247557996, 482.7822436696597], [141.22182216936852, 346.4270057321846], [206.31948949078424, 356.7387529836485], [202.39427275621864, 368.9872676086593], [136.2964448024117, 368.67555898584044], [454.78000220898934, 348.3276075895992], [398.6821272555564, 355.2080431875895], [398.9194910642594, 369.6579535284187], [466.01878775359233, 368.7792910743897]],
        'eyepatch': [[54.132994582809886, 330.2447406482356], [53.94983737338171, 411.6786947731232], [59.50117090734213, 485.54290769879117], [69.05631570910228, 577.6685769791815], [80.73400747239302, 669.2047081882876], [156.52267192878207, 721.5706883991684], [224.03761978834723, 739.1269072358452], [301.4803537679236, 738.2366874355024], [373.4196207112528, 736.6185556997145], [445.4373067968218, 720.1452812831552], [517.3056114476371, 670.5474614197833], [531.7799053755264, 574.1779931382804], [540.681172219442, 487.967223266098], [542.4032150608897, 399.64595333584305], [541.5099369565868, 318.2177239885218], [484.00763535360403, 311.3318445452918], [436.57616449858205, 326.12885038303966], [386.214847801106, 333.2043197182652], [344.39911403378784, 336.7706741289662], [115.84864343665006, 313.35525243241443], [152.60840318917894, 322.7145050535586], [201.39783835228144, 332.29526724516336], [249.58724826191298, 336.53976562323317], [116.48023640991207, 348.8633768136441], [167.9642886955806, 350.9962302246727], [231.6749647028165, 359.48349174177827], [168.11831577303042, 375.4865728177492], [170.07462103025938, 361.76575290725043], [480.7831200700384, 348.57719399476593], [423.78106882269736, 353.08381522791285], [369.5853199174605, 360.3348770905004], [429.2517105029677, 374.978498189726], [428.4672557696136, 361.0310278167258], [298, 363], [253.70821429640165, 456.1515630753871], [232.81854206254127, 493.52915431030885], [250.27449264190767, 519.2760705851281], [294.9905749783811, 522.6580485667231], [340.00710866420684, 520.8077271147647], [357.28424845402884, 493.1349774295837], [336.03221275387335, 457.7253897416814], [296, 407], [270.69780042635847, 507.2277260957476], [320.8265507066314, 506.90809731554305], [219.49207600124322, 603.6108989555861], [236.4148918469843, 589.8509195222699], [267.0123175575189, 590.2653879517876], [302.37639394449644, 589.4456339021824], [337.18338067155105, 591.0755705685021], [366.9537080661368, 591.1696362146871], [383.17030058050824, 601.5027761622135], [366.07822563380967, 614.8268645173376], [336.20759244137867, 615.427540755917], [304.12597029775543, 615.4777558918809], [270.01910167830954, 615.9331065732697], [240.4271869365151, 614.9063722445486], [255.5183417994636, 603.9175341052295], [302.81892822034536, 605.4895650711086], [350.74058301633727, 604.2225054756758], [350.6655959742464, 603.528118265738], [303.78446463916174, 604.3090513544694], [256.409865954666, 603.8790201634539], [298.25175247557996, 482.7822436696597], [141.22182216936852, 346.4270057321846], [206.31948949078424, 356.7387529836485], [202.39427275621864, 368.9872676086593], [136.2964448024117, 368.67555898584044], [454.78000220898934, 348.3276075895992], [398.6821272555564, 355.2080431875895], [398.9194910642594, 369.6579535284187], [466.01878775359233, 368.7792910743897]],
        'ironman': [[54.132994582809886, 330.2447406482356], [53.94983737338171, 411.6786947731232], [59.50117090734213, 485.54290769879117], [69.05631570910228, 577.6685769791815], [80.73400747239302, 669.2047081882876], [156.52267192878207, 721.5706883991684], [224.03761978834723, 739.1269072358452], [301.4803537679236, 738.2366874355024], [373.4196207112528, 736.6185556997145], [445.4373067968218, 720.1452812831552], [517.3056114476371, 670.5474614197833], [531.7799053755264, 574.1779931382804], [540.681172219442, 487.967223266098], [542.4032150608897, 399.64595333584305], [541.5099369565868, 318.2177239885218], [484.00763535360403, 311.3318445452918], [436.57616449858205, 326.12885038303966], [386.214847801106, 333.2043197182652], [344.39911403378784, 336.7706741289662], [115.84864343665006, 313.35525243241443], [152.60840318917894, 322.7145050535586], [201.39783835228144, 332.29526724516336], [249.58724826191298, 336.53976562323317], [116.48023640991207, 348.8633768136441], [167.9642886955806, 350.9962302246727], [231.6749647028165, 359.48349174177827], [168.11831577303042, 375.4865728177492], [170.07462103025938, 361.76575290725043], [480.7831200700384, 348.57719399476593], [423.78106882269736, 353.08381522791285], [369.5853199174605, 360.3348770905004], [429.2517105029677, 374.978498189726], [428.4672557696136, 361.0310278167258], [298, 363], [253.70821429640165, 456.1515630753871], [232.81854206254127, 493.52915431030885], [250.27449264190767, 519.2760705851281], [294.9905749783811, 522.6580485667231], [340.00710866420684, 520.8077271147647], [357.28424845402884, 493.1349774295837], [336.03221275387335, 457.7253897416814], [296, 407], [270.69780042635847, 507.2277260957476], [320.8265507066314, 506.90809731554305], [219.49207600124322, 603.6108989555861], [236.4148918469843, 589.8509195222699], [267.0123175575189, 590.2653879517876], [302.37639394449644, 589.4456339021824], [337.18338067155105, 591.0755705685021], [366.9537080661368, 591.1696362146871], [383.17030058050824, 601.5027761622135], [366.07822563380967, 614.8268645173376], [336.20759244137867, 615.427540755917], [304.12597029775543, 615.4777558918809], [270.01910167830954, 615.9331065732697], [240.4271869365151, 614.9063722445486], [255.5183417994636, 603.9175341052295], [302.81892822034536, 605.4895650711086], [350.74058301633727, 604.2225054756758], [350.6655959742464, 603.528118265738], [303.78446463916174, 604.3090513544694], [256.409865954666, 603.8790201634539], [298.25175247557996, 482.7822436696597], [141.22182216936852, 346.4270057321846], [206.31948949078424, 356.7387529836485], [202.39427275621864, 368.9872676086593], [136.2964448024117, 368.67555898584044], [454.78000220898934, 348.3276075895992], [398.6821272555564, 355.2080431875895], [398.9194910642594, 369.6579535284187], [466.01878775359233, 368.7792910743897]],
        "skull" : [[94.36614797199479,301.0803014941178],[103.3112341317163,370.94425891220794],[120.32682383634102,423.44019820073913],[136.47515990999432,479.5313526801685],[144.0368892689739,530.2345465095229],[172.36671158523987,580.3629853084399],[217.01976787749376,619.1929480747351],[269.34754914721543,625.5185645282593],[326.48254316405735,621.3861472887296],[367.5697682338512,588.2815093455445],[396.3225813396373,544.5241298700507],[423.17220298223486,485.34023789625417],[433.9843247454375,424.6310467376783],[459.5753658677024,376.88741971189734],[465.6871064619868,309.4410229689395],[439.2202424949693,261.17900856324786],[404.95656878888406,237.16839138607617],[349.4475953084992,224.72336816106127],[307.5262703136751,246.56374069983377],[111.59908955786085,255.73818792771897],[140.77843006651088,236.25905776423554],[198.25614310392174,221.75964368670276],[238.0607640650076,244.705502740957],[147.51722669161887,322.2920755920064],[179.96374258674177,303.20283557208495],[219.89652431504095,321.63741406437117],[181.93382178127874,336.62855114616417],[181.67029281471235,321.84674383355735],[409.08887297158253,319.49332724817634],[372.08555159755235,302.6637205310945],[332.21673690859785,314.25212117506817],[371.9034386455536,336.7928247239386],[370.73203771018734,318.2549362647991],[275,262],[241.49292248091808,382.6509156918952],[228.65540058230079,403.67602315679153],[246.4207645046435,428.633436281585],[281.6262637981823,429.7101230850766],[320.3090052424696,429.4111504923561],[337.71957018298144,408.9834145077307],[324.9443408840292,383.11655691739367],[277,336],[262.6247652804272,418.02062856158705],[305.62131595904475,419.9849042391749],[192.0888434079335,501.27870633434],[227.89330220055228,491.767986224554],[254.82152484033276,488.28172522414377],[274.58325738122585,496.93117201682657],[298.6427918040954,490.9689564164321],[325.48328507490595,499.3328015524256],[350.42668910649365,508.3776245292422],[327.3034449428819,532.1604992353581],[302.413708672554,539.1078344701017],[266.7645104587291,540.3023216343349],[237.0072802317868,530.3260142620247],[215.71258213035736,519.4068856743318],[222.47713501183063,502.96356939871526],[278.19882029298384,511.73001012850216],[321.89078331130554,511.2982898921548],[318.4792941712966,518.8634093151715],[277.74782145336667,522.9574136207773],[230.31017878122015,512.4917843225409],[281.2762389085891,407.8752450214805],[163.2415047021451,306.7465365446632],[202.42996875366381,307.91977418268493],[204.91393138279884,330.1328065429834],[161.72396129164846,332.9605656535211],[394.08708850976745,308.0776176192674],[354.1514690637372,305.45718896085043],[349.5616880820385,328.5223891568975],[391.4980892099413,331.1427807886423]],
        "monalisa" : [[266.539778613571,254.84378898872825],[266.3039097561577,285.302233189556],[271.19357329466345,316.3538789507933],[278.7139543521674,345.15573844972926],[293.15712497356776,368.9809024015706],[312.64193974141324,389.09850232246515],[322.13343587641253,398.3663601209212],[336.9858985066435,401.49456958745145],[356.87519225850986,398.5376499254816],[382.97232156668036,391.79752653535775],[421.61286401088506,373.50434543677886],[448.74322775690695,344.0259953810623],[464.77440099078314,310.71915538180275],[468.2775933241595,272.2241198406615],[466.74514645738424,247.20492682906303],[415.26964981149064,225.8370550250565],[390.13712322351404,222],[361.92175039938184,220.2582273389706],[342.2734356138508,232.04834635926073],[267.7624903928149,236.00873885152805],[280.88607721372824,229],[303.9033677258633,228],[316.6965360192193,234.20369314639848],[281.57998031880885,254.77971856631495],[298.953459306752,246.21641370334032],[315.75345517431316,254.4516165242651],[296.6631361379687,258.36486568494297],[301.63327656416925,252.0239926097512],[398.27491865673994,249.8954346966754],[380.22403819342355,243.83584281695727],[357.98660716766716,253.53119540181672],[378.25469629277825,255.99515336941278],[382.6139465907322,249.6433274231842],[328,253],[314.73794539936216,301.757722929817],[309.85213116736014,314.6797549304112],[313.1507370768973,321.4994076914073],[325.20473159190635,327.87953636258146],[350.1231795924951,324.5425216268138],[358.3783946629097,316.6717252774034],[352.7986254362873,299.5519517987678],[326,282],[314.75674487301336,318.32005216616164],[343.0322275619273,319.2819917007706],[307.87514392633693,346.0346979532304],[316.68926117981914,342.91320569661593],[321.7320399187087,341.45780089974846],[327.8558316510405,343.56649844038935],[336.18423231506125,341.74737597014604],[351.00603891713007,342.2560527375472],[367.88222498993025,344.3660717427479],[357.305053617142,354.4583428810625],[343.5761668856892,358.8848818975423],[328.82001419900075,359.1051832365163],[320.36190636746045,358.71759346010083],[312.61714975606304,353.5625007817836],[318.4988566294063,348.1744254793423],[328.6406599928464,349.73460503451736],[350.2480353796336,349.6831133201238],[349.5754234743516,349.5362145583936],[329.32557946752445,349.67345155068153],[318.2253756678819,347.9222277142419],[324.4964277572599,315.63122813643895],[288.26630901657126,248.99890899333045],[309.3536455351319,248.83485523505226],[307.7075352919804,256.40978560947974],[288.62032608071166,258.5736833679789],[390.2498028902113,244.8663932568382],[368.1047796233772,247.18427292360775],[368.62079313091925,255.76448975973483],[390.7655312307384,254.4464699123733]]
    };

    let animationMaskRequest;
    let animationGridRequest;
    let animationRequest;

    function drawGridLoop() {
        // get position of face
        positions = ctrack.getCurrentPosition();
        if (positions) {
            // draw current grid
            ctrack.draw(camOverlayElm);
        }
        // check whether mask has converged
        const pn = ctrack.getConvergence();
        if (pn < 0.4) {
            switchMasks();
            animationMaskRequest = requestAnimFrame(drawMaskLoop);
        } else {
            animationGridRequest = requestAnimFrame(drawGridLoop);
        }
    }
    
    let currentMask = '';
    const maskList = ['none','eyepatch','ironman','skull','monalisa'];

    function switchMasks() {
        // get mask
        const maskname = currentMask;
        fd.load(document.getElementById(maskname), masks[maskname], pModel);
    }

    function drawMaskLoop() {
        // get position of face
        positions = ctrack.getCurrentPosition();
        if (positions) {
            // draw mask on top of face
            fd.draw(positions);
        }
        animationMaskRequest = requestAnimFrame(drawMaskLoop);
    }

    /*********** setup of emotion detection *************/

    // set eigenvector 9 and 11 to not be regularized. This is to better detect motion of the eyebrows
    pModel.shapeModel.nonRegularizedVectors.push(9);
    pModel.shapeModel.nonRegularizedVectors.push(11);

    function drawLoop() {
        animationRequest = requestAnimFrame(drawLoop);
        overlayCC.clearRect(0, 0, camPreviewWidth, camPreviewHeight);
        //psrElement.innerHTML = 'score :' + ctrack.getScore().toFixed(4);

        if (ctrack.getCurrentPosition()) {
            ctrack.draw(camOverlayElm);
        }

        const cp = ctrack.getCurrentParameters();

        const er = ec.meanPredict(cp);
        if (er) {
            updateData(er);
            for (let i = 0; i < er.length; i++) {
                if (er[i].value > 0.4) {
                    document.getElementById('emotion_icon' + (i + 1)).style.opacity = 1.0;
                    currentMask = maskList[i + 1];
                    switchMasks();
                } else {
                    document.getElementById('emotion_icon' + (i + 1)).style.opacity = 0.5;
                    //currentMask = maskList[0];
                    //switchMasks();
                }
            }
        }

    }

    delete emotionModel['disgusted'];
    delete emotionModel['fear'];
    const ec = new emotionClassifier();
    ec.init(emotionModel);
    const emotionData = ec.getBlank();

    /************ d3 code for barchart *****************/

    const margin = {
            top: 20,
            right: 20,
            bottom: 10,
            left: 40
        },
        width = window.innerWidth - margin.left - margin.right,
        height = 50 - margin.top - margin.bottom;

    const barWidth = 30;

    const formatPercent = d3.format(".0%");

    const x = d3.scale.linear()
        .domain([0, ec.getEmotions().length]).range([margin.left, width + margin.left]);

    const y = d3.scale.linear()
        .domain([0, 1]).range([0, height]);

    const svg = d3.select("#emotion_chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)

    svg.selectAll("rect").
    data(emotionData).
    enter().
    append("svg:rect").
    attr("x", function (datum, index) {
        return x(index);
    }).
    attr("y", function (datum) {
        return height - y(datum.value);
    }).
    attr("height", function (datum) {
        return y(datum.value);
    }).
    attr("width", barWidth).
    attr("fill", "#666666");

    svg.selectAll("text.labels").
    data(emotionData).
    enter().
    append("svg:text").
    attr("x", function (datum, index) {
        return x(index) + barWidth;
    }).
    attr("y", function (datum) {
        return height - y(datum.value);
    }).
    attr("dx", -barWidth / 2).
    attr("dy", "1.2em").
    attr("text-anchor", "middle").
    text(function (datum) {
        return datum.value;
    }).
    attr("fill", "white").
    attr("class", "labels");

    svg.selectAll("text.yAxis").
    data(emotionData).
    enter().append("svg:text").
    attr("x", function (datum, index) {
        return x(index) + barWidth;
    }).
    attr("y", height).
    attr("dx", -barWidth / 2).
    attr("text-anchor", "middle").
    attr("style", "font-size: 12").
    attr("fill", "white").
    text(function (datum) {
        return datum.emotion;
    }).
    attr("transform", "translate(0, 18)").
    attr("class", "yAxis");

    function updateData(data) {
        // update
        const rects = svg.selectAll("rect")
            .data(data)
            .attr("y", function (datum) {
                return height - y(datum.value);
            })
            .attr("height", function (datum) {
                return y(datum.value);
            });
        const texts = svg.selectAll("text.labels")
            .data(data)
            .attr("y", function (datum) {
                return height - y(datum.value);
            })
            .text(function (datum) {
                return datum.value.toFixed(1);
            });

        // enter
        rects.enter().append("svg:rect");
        texts.enter().append("svg:text");

        // exit
        rects.exit().remove();
        texts.exit().remove();
    }

    function locationHashChanged() {
        if (location.hash === '#camera') {
            cameraStart();
        } else {
            cameraStop();
        }
    }
    window.addEventListener('hashchange', locationHashChanged, false);

})();
